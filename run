#!/bin/bash

set -Eeu -o pipefail
shopt -s inherit_errexit

die() {
  local exit_code=$?
  >&2 echo "[error] $1"
  if [ "$exit_code" -eq 0 ]; then
    exit_code=1
  fi
  exit $?
}

root_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

data_dir="$root_dir/data"
mkdir -p "$data_dir"

ports_lock_file="$data_dir/ports_lock_file"
ports_register_file="$data_dir/ports_register_file"

register_taken_port() {
  local port="$1"

  local ports_register_file_escaped
  printf -v ports_register_file_escaped %q "$ports_register_file"

  local port_escaped
  printf -v port_escaped %q "$port"

  SHELL=/bin/bash flock "$ports_lock_file" -c "
    if [ -e $ports_register_file_escaped ]; then
      while IFS= read -r line; do
        if [ \$line -eq $port_escaped ]; then
          exit 1
        fi
      done < $ports_register_file_escaped
    fi

    if ! echo $port_escaped > $ports_register_file_escaped; then
      exit 2
    end
  "
}

unregister_taken_port() {
  local port="$1"

  if [ "$port" = all ]; then
    if [ -e "$ports_register_file" ]; then
      rm "$ports_register_file"
    fi
    return
  fi

  local ports_register_file_escaped
  printf -v ports_register_file_escaped %q "$ports_register_file"

  local port_escaped
  printf -v port_escaped %q "$port"

  SHELL=/bin/bash flock "$ports_lock_file" -c "
    lines=()
    if [ -e $ports_register_file_escaped ]; then
      while IFS= read -r line; do
        if [ \$line -eq $port ]; then
          continue
        fi
        lines+=(\"\$line\")
      done < $ports_register_file_escaped
    fi
    printf '%s\\n' \"\${lines[@]}\" > $ports_register_file_escaped
  "
}

get_available_port() {
  local taken_ports
  readarray -t taken_ports < <(
    ss -lntu | tail -n +2 | awk '{ m=match($5, /([0-9]+)$/, ms); if (m) { print ms[1] } }'
  )

  read -r lowest highest < /proc/sys/net/ipv4/ip_local_port_range
  while [ "$lowest" -le "$highest" ]; do
    for tp in "${taken_ports[@]}"; do
      if [ "$lowest" -eq "$tp" ]; then
        ((lowest++))
        continue 2
      fi
    done

    if register_taken_port "$lowest"; then
      echo "$lowest"
      break
    elif [ $? -eq 2 ]; then
      die "failed to persist taken port to the filesystem"
    fi

    ((lowest++))
  done
}

case "$1" in
  get_port)
    get_available_port
    exit $?
  ;;
  free_port)
    unregister_taken_port "$2"
    exit $?
  ;;
  test|test_server|server|db|integration_tests)
    cmd="$1"
  ;;
  *)
    die "invalid command $1"
  ;;
esac

unset app_db_port app_instance app_dir app_port
run_server_extra_args=()
while [ $# -gt 0 ]; do
  case "$1" in
    # options
    --db-port) app_db_port="$2"; shift ;;
    --instance) app_instance="$2"; shift ;;
    --dir) app_dir="$2"; shift;;
    --port) app_port="$2"; shift;;

    # arguments forwarded to the server
    --listen|--admin-credentials-for-test|--signal-file)
      run_server_extra_args+=("$1=$2")
      shift
    ;;
    --reset-before-run)
      run_server_extra_args+=("$1")
    ;;

    *)
      die "unexpected argument $1"
    ;;
  esac
  shift
done

app_instance="${app_instance:-library}"
app_dir="${app_dir:-$apps_dir/$app_instance}"
app_db_dir="${app_db_dir:-$app_dir/db}"
log_dir="${log_dir:-$app_dir/log}"

mkdir -p "$app_dir"

start_server() {
  cd "$root_dir/server"
  cargo run -- \
    --db-try-limit=1 \
    --db-try-delay=0 \
    --db-url="postgresql://localhost:$app_db_port/$app_instance?user=$USER" \
    "${run_server_extra_args[@]}"
}

clean_test_server() {
  unregister_taken_port "$app_port"
  rm -rf "$app_dir"
}

taken_ports_file="$data_dir/test_db_port"
cleanup_integration_tests() {
  local exit_code=$?
  rm -rf "${test_db_dir:-}" "$taken_ports_file"
  unregister_taken_port all
  pkill -P $$
  exit "$exit_code"
}

start_db() {
  docker run -it --rm \
    -e ALLOW_EMPTY_PASSWORD=yes \
    -e "POSTGRESQL_USERNAME=$USER" \
    "$@" docker.io/bitnami/postgresql:11-debian-10
}

case "$cmd" in
  test_server)
    trap clean_test_server EXIT
    mkdir -p "$log_dir"
    run_server_extra_args+=(--log-format=test "--log-dir=$log_dir")
    start_server
  ;;
  db)
    mkdir -p "$app_db_dir"
    start_db -p "$app_db_port:5432" -v "$app_db_dir":/bitnami/postgresql
  ;;
  server)
    start_server
  ;;
  integration_tests)
    trap cleanup_integration_tests EXIT

    get_available_port > "$taken_ports_file"
    read -r test_db_port < "$taken_ports_file"

    test_db_dir="$data_dir/test-db-$test_db_port"
    rm -rf "$test_db_dir"
    mkdir -p "$test_db_dir"

    unset is_db_ready
    while IFS= read -r line; do
      case "$line" in
        *" database system is ready to accept connections")
          is_db_ready=true
          break
        ;;
        *)
          echo "$line"
        ;;
      esac
    done < <(start_db -p "$test_db_port:5432")
    if [ ! "${is_db_ready:-}" ]; then
      die "failed to start the databases' server"
    fi

    cargo test --quiet --test '*'
  ;;
  *)
    2>&1 echo "ERROR: Unrecognized command $cmd"
    exit 1
  ;;
esac
